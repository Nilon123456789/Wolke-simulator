# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - test
  - style
  - javadoc
  - deploy

default:
  image: maven:3-eclipse-temurin-17-alpine
  cache:
    paths:
      - .m2/
  artifacts:
    expire_in: 1 week

variables:
  MAVEN_OPTS: >-
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository

build-job:
  stage: build

  script:
    - echo "Building the project..."
    - mvn -DskipTests compile


unit-test-job:
  stage: test

  script:
    - echo "Running tests"
    - mvn clean test

check-style-job:
  stage: style

  script:
    - echo "Checking style"
    - mvn spotless:check

build-javadoc-job:
  stage: javadoc

  script:
    - echo "Building javadoc"
    - mvn javadoc:javadoc
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # only run on merge requests
      when: on_success

deploy-javadoc-jar-job:
  stage: deploy
  script:
    - echo "Deploying javadoc & jar..."
    - mvn javadoc:javadoc
    - mvn clean compile assembly:single
    - apk add git
    - git config user.email "wolke@bot.com"
    - git config user.name "wolke-bot"
    - if ! git remote | grep -q gitlab_origin; then
      { git remote add gitlab_origin https://oauth2:$GITLAB_ACCESS_TOKEN@gitlab.com/Nilon123456789/24_simulateur-wolke.git; }
      fi
    - git add .
    - git commit -m "BOT | JavaDoc & jar deploy"
    - git push gitlab_origin HEAD:main -o ci.skip # prevent triggering pipeline again
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "main"'
      when: on_success
